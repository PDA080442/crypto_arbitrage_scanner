BG TRXUSDT +
COEX CWIFUSDT +
IO ABT_ETH +
HTX ampusdt +
KC AERGO-USDT +
MEXC SKYAIUSDT +
OKX MDT-USDT +
POEX XMR_USDT  +


KUCOIN
import requests
import time
import hmac
import hashlib
from urllib.parse import urlencode
import sys
import os
import logging

# Директория для логов
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_filename = os.path.join(log_dir, "kucoin_api.log")

# Настройка логирования
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', handlers=[
    logging.FileHandler(log_filename),
    logging.StreamHandler(sys.stdout)
])
logger = logging.getLogger(__name__)

# Ваши API ключ, секрет и пароль
API_KEY = "6277f8c07e72f4000666f2da"
API_SECRET = "16941bb2-79ea-4da6-8d39-000bf1b7df39"
API_PASSPHRASE = "PopravkinDanil080442"

# Базовый URL для API KuCoin
BASE_URL = "https://api.kucoin.com"

# Директория для результатов
results_dir = "resultstxt"
if not os.path.exists(results_dir):
    os.makedirs(results_dir)

results_filepath = os.path.join(results_dir, "kucoin_result.txt")

def get_request(endpoint, params=None):
    """
    Выполняет GET запрос к API KuCoin с аутентификацией.

    :param endpoint: Конечная точка API.
    :param params: Параметры запроса.
    :return: Ответ запроса в формате JSON.
    """
    url = f"{BASE_URL}{endpoint}"
    if params is None:
        params = {}
    headers = create_auth_headers("GET", endpoint, params)

    try:
        response = requests.get(url, headers=headers, params=params)
        logger.info(f"Response status code: {response.status_code}")
        logger.info(f"Response headers: {response.headers}")
        logger.info(f"Response body: {response.text}")
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"Request to {url} failed: {e}")
        return {}

def create_auth_headers(method, endpoint, params):
    """
    Создает заголовки аутентификации для запроса.

    :param method: HTTP метод.
    :param endpoint: Конечная точка API.
    :param params: Параметры запроса.
    :return: Словарь с заголовками.
    """
    now = str(int(time.time() * 1000))
    str_to_sign = now + method + endpoint + urlencode(params)
    signature = hmac.new(API_SECRET.encode('utf-8'), str_to_sign.encode('utf-8'), hashlib.sha256).digest()
    signature_base64 = signature.hex()

    return {
        'KC-API-KEY': API_KEY,
        'KC-API-SIGN': signature_base64,
        'KC-API-TIMESTAMP': now,
        'KC-API-PASSPHRASE': API_PASSPHRASE,
        'Content-Type': 'application/json'
    }

def get_pairs():
    """
    Получает список торговых пар с биржи KuCoin.

    :return: Список торговых пар.
    """
    endpoint = "/api/v1/symbols"
    data = get_request(endpoint)
    return [symbol['symbol'] for symbol in data.get("data", [])]

def get_price(pair):
    """
    Получает цену для торговой пары с биржи KuCoin.

    :param pair: Торговая пара.
    :return: Цена торговой пары.
    """
    endpoint = f"/api/v1/market/orderbook/level1?symbol={pair}"
    data = get_request(endpoint)
    if data and "data" in data:
        return float(data["data"]["price"])
    return 0.0

def get_volume(pair):
    """
    Получает объем для торговой пары с биржи KuCoin.

    :param pair: Торговая пара.
    :return: Объем торговой пары.
    """
    endpoint = f"/api/v1/market/stats?symbol={pair}"
    data = get_request(endpoint)
    if data and "data" in data:
        return float(data["data"]["volValue"])
    return 0.0

def write_results_to_file(filepath, data):
    """
    Записывает данные в файл.

    :param filepath: Путь к файлу.
    :param data: Данные для записи.
    """
    with open(filepath, 'a') as file:
        file.write(data + '\n')

if __name__ == "__main__":
    # Очистка файла перед записью новых данных
    open(results_filepath, 'w').close()

    # Пример использования функций
    pairs = get_pairs()
    logger.info(f"Pairs: {pairs}")
    
    for pair in pairs:
        price = get_price(pair)
        volume = get_volume(pair)
        formatted_price = f"{price:,.6f}"
        formatted_volume = f"{int(volume):,}".replace(",", " ")  # Форматируем объем без десятичных знаков и заменяем запятые пробелами
        logger.info(f"Цена для {pair}: {formatted_price}")
        logger.info(f"Объем для {pair}: {formatted_volume}")
        
        # Запись результатов в файл
        result_data = f"Пара: {pair}, Цена: {formatted_price}, Объем: {formatted_volume}"
        write_results_to_file(results_filepath, result_data)
        
        time.sleep(1)  # Добавляем задержку, чтобы избежать превышения лимита запросов

    logger.info(f"Results have been written to {results_filepath}")
    print(f"Results have been written to {results_filepath}")





Poloniex
import requests
import logging
import os
import time

# Ваши API ключ и секрет
API_KEY = "7LWG66E8-Y56PB1PX-N8TZ0FKK-VGQYG7A4"
API_SECRET = "bc17ae2f2b28213a5e3a272f3e7b34d1287c76c0"

# Базовый URL для API Poloniex
BASE_URL = "https://api.poloniex.com"

# Настройка логирования
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_file = os.path.join(log_dir, "poloniex_api.log")
logging.basicConfig(filename=log_file, level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Очистка файла результатов перед новым запуском
result_dir = "resultstxt"
if not os.path.exists(result_dir):
    os.makedirs(result_dir)

result_file = os.path.join(result_dir, "poloniex_result.txt")
open(result_file, 'w').close()

def get_request(endpoint, params=None):
    """
    Выполняет GET запрос к API Poloniex с аутентификацией.

    :param endpoint: Конечная точка API.
    :param params: Параметры запроса.
    :return: Ответ запроса в формате JSON.
    """
    url = f"{BASE_URL}{endpoint}"
    if params is None:
        params = {}

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        log_info(f"Ответ от {url}: {response.text}")
        return response.json()
    except requests.RequestException as e:
        log_error(f"Запрос к {url} не удался: {e}")
        return {}

def get_pairs():
    """
    Получает список торговых пар с биржи Poloniex.

    :return: Список торговых пар.
    """
    endpoint = "/markets"
    data = get_request(endpoint)
    return [symbol['symbol'] for symbol in data if 'USDT' in symbol['symbol']] if data else []

def get_price(pair):
    """
    Получает цену для торговой пары с биржи Poloniex.

    :param pair: Торговая пара.
    :return: Цена торговой пары.
    """
    endpoint = f"/markets/{pair}/price"
    data = get_request(endpoint)
    if data and "price" in data:
        return float(data["price"])
    return 0.0

def get_volume(pair):
    """
    Получает объем для торговой пары с биржи Poloniex в USDT.

    :param pair: Торговая пара.
    :return: Объем торговой пары в USDT.
    """
    endpoint = "/markets/ticker24h"
    data = get_request(endpoint)
    if data:
        for ticker in data:
            if ticker['symbol'] == pair:
                price = get_price(pair)
                if 'quoteVolume' in ticker:
                    return float(ticker['quoteVolume'])
                elif 'quantity' in ticker:
                    return float(ticker['quantity']) * price
                elif 'amount' in ticker:
                    return float(ticker['amount']) * price
    return 0.0

def log_info(message):
    logger.info(message)
    print(message)

def log_error(message):
    logger.error(message)
    print(message)

if __name__ == "__main__":
    pairs = get_pairs()
    log_info(f"Pairs: {pairs}")

    with open(result_file, 'a') as f:
        for pair in pairs:
            price = get_price(pair)
            volume_usdt = get_volume(pair)
            if price == 0.0 and volume_usdt == 0.0:
                log_error(f"Invalid pair skipped: {pair}")
                continue
            formatted_volume = f"{int(volume_usdt):,}".replace(",", " ")
            message_price = f"Цена для {pair}: {price:.6f}"
            message_volume = f"Объем для {pair}: {formatted_volume}"
            log_info(message_price)
            log_info(message_volume)
            f.write(f"Пара: {pair}, {message_price}, {message_volume}\n")
            f.flush()  # Ensure data is written to the file immediately

    log_info(f"Results have been written to {result_file}")
    print(f"Results have been written to {result_file}")
